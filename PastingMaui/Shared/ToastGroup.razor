@using System.ComponentModel
@using System.Collections.ObjectModel;
@inject IToastService toast_service
@*@using PastingMaui.Shared.Toast*@

<div class="position-absolute bottom-0 end-0 toast-alert-container">

    @{
        void RenderToasts(ObservableCollection<ToastData> toasts)
        {
            foreach(var toast in toasts)
            {
                @RenderToast(toast);
            }
        }
        toast_service.EnumerateToasts(RenderToasts);
        //ToastData test = new ToastData("test", "testing");
    //<Toast toastData= "test" ></Toast>
}
</div>

@code {


    protected override void OnInitialized()
    {
        toast_service.Toasts.CollectionChanged += async (sender, args) =>
        {
            await Refresh();
        };
        toast_service.UpdateRendered = new PropertyChangedEventHandler(async (obj, sender) =>
        {
            await Refresh();
        });

    }

    protected RenderFragment RenderToast(ToastData toastData) => (builder) =>
    {
        // just use the original method to dynamically render, not worth it
        // on change in toastData baed on Inoifitcation, rerender
        builder.OpenComponent(0, typeof(Toast));
        builder.AddAttribute(1, "toastData", toastData);
        builder.CloseComponent();
    };

    protected async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

}
